1.1 Aside from the smart cell phones used by a billion people, list and
describe four other types of computers.

  a)Personal Computers
  b)Severs
  c)Super Computers
  d)Embedded Computers

1.2 The eight great ideas in computer architecture are similar to ideas
from other fields. Match the eight ideas from computer architecture, “Design for
Moore’s Law”, “Use Abstraction to Simplify Design”, “Make the Common Case
Fast”, “Performance via Parallelism”, “Performance via Pipelining”, “Performance
via Prediction”, “Hierarchy of Memories”, and “Dependability via Redundancy” to
the following ideas from other fields:
a. Assembly lines in automobile manufacturing
  >> Pipelining

b. Suspension bridge cables
  >> Parallelism

c. Aircraft and marine navigation systems that incorporate wind information
  >> Performance Via Prediction

d. Express elevators in buildings
  >> Make common case fast

e. Library reserve desk
  >> Hierarchy of Memories

f. Increasing the gate area on a CMOS transistor to decrease its switching time
  >> Dependability via Redundancy

g. Adding electromagnetic aircraft catapults (which are electrically-powered
as opposed to current steam-powered models), allowed by the increased power
generation offered by the new reactor technology
  >> Design for Moore's Law.

h. Building self-driving cars whose control systems partially rely on existing sensor
systems already installed into the base vehicle, such as lane departure systems and
smart cruise control systems
  >> Use Abstraction to Simplify Design

1.3 Describe the steps that transform a program written in a high-level
language such as C into a representation that is directly executed by a computer
processor.

  >> High level language is compiled and translated into assembly language which is then translated into binary machine language

1.4 Assume a color display using 8 bits for each of the primary colors
  (red, green, blue) per pixel and a frame size of 1280 × 1024.

a. What is the minimum size in bytes of the frame buff er to store a frame?
    > 1280*1024*3 3932160 bytes

b. How long would it take, at a minimum, for the frame to be sent over a 100
  Mbit/s network?

  >> 12.5 Mb/s = 3.9Mb/x = 0.312 sec

1.5 Consider three different processors P1, P2, and P3 executing
the same instruction set. P1 has a 3 GHz clock rate and a CPI of 1.5. P2 has a
2.5 GHz clock rate and a CPI of 1.0. P3 has a 4.0 GHz clock rate and has a CPI
of 2.2.
a. Which processor has the highest performance expressed in instructions per second?

  >> performance = clock rate / CPI instructions per second

  >> performance(p1) = 3x10^9 / 1.5 = 2x10^9 instructions per second

  >> performance(p2) = 2.5x10^9 / 10.0 = 2.5x10^9 instructions per second

  >> performance(p3) = 4x10^9 / 2.2 = 1.81x10^9 instructions per second

  >> Thus, the performance of processor p3 is the best because it takes up less time.

b. If the processors each execute a program in 10 seconds, find the number of
cycles and the number of instructions.

  >> Number_Of_Cycles(p) = Time*Clock_Rate

  >> Number_Of_Instructions(p) = Number_Of_Cycles/CPI

  >> Number_Of_Cycles(p1) = (10 seconds) * (3x10^9 Hz) = 30x10^9 cycles

  >>Number_Of_Instructions(p1) = (30x10^9 cycles)/1.5 = 20x10^9 instructions

  >> Number_Of_Cycles(p2) = (10 seconds) * (2.5x10^9 Hz) = 25x10^9 cycles

  >> Number_Of_Instructions(p2) = (25x10^9 cycles)/1.0 = 25x10^9 instructions
  >> Number_Of_Cycles(p3) = (10 seconds) * (4.0x10^9 Hz) = 40x10^9 cycles


  >> Number_Of_Instructions(p3) = (40x10^9 cycles)/2.2 = 18.8x10^9 instructions

c. We are trying to reduce the execution time by 30% but this leads to an increase
of 20% in the CPI. What clock rate should we have to get this time reduction?

  >> New_Time = 10 - 0.3 * 10 = 7 seconds

  >> Clock_Rate(p) = ((Number_Of_Instructions)*(CPI))/time

  >> new_CPI(p1) = 1.2 * 1.5 = 1.8

  >> Number_Of_Instructions(p1) = Number_Of_Cycles/old_CPI = (30x10^9 cycles) / 1.5 = 20x10^9

  >> Clock_Rate(p1) = (20x10^9 * 1.8) / 7 = 5.14Ghz

  >>new_CPI(p2) = 1.2 * 1.0 = 1.2

  >> Clock_Rate(p2) = (25x10^9 * 1.2) / 7 = 4.28GHz

  >> new_CPI(p3) = 1.2 * 2.2 = 2.64

  >> Clock_Rate = (18.18x10^9 * 2.64) / 7 = 6.85GHz

  1.6 Consider two different implementations of the same instruction
set architecture. The instructions can be divided into four classes according to
their CPI (class A, B, C, and D). P1 with a clock rate of 2.5 GHz and CPIs of 1, 2, 3, and 3, and P2 with a clock rate of 3 GHz and CPIs of 2, 2, 2, and 2.
Given a program with a dynamic instruction count of 1.0E6 instructions divided
into classes as follows: 10% class A, 20% class B, 50% class C, and 20% class D,
which implementation is faster?

a. What is the global CPI for each implementation?

>> CPU_Time = sum(
  (Instructions* CPI) / Clock_Rate
)

>> CPU_Time(p1) = (10^6 * [(0.1 * 1) + (0.2 * 2) + (0.5 *3) + (0.2 * 3)]) / 2.5GHz

>> 1.04ms

>> CPU_Time(p2) = (10^6 * [(0.1 * 2) + (0.2 * 2) + (0.5 * 2 ) + ( 0.2 * 2)]) / 3GHz

>> 0.67ms

>> p2 takes less time and CPU_Time is inversely proportional to performance thus p2 is better.

>> Global_CPI = (CPU_Time * Clock_Rate) / Number_Of_Instructions

>> Global_CPI(p1) = (1.04x10^-3s * 2.5x10^9) / 10^6 = 2.6

>> Global_CPI(p2) = (0.67x10^-3s * 3) / 10^6 = 2.01

b. Find the clock cycles required in both cases.

>> Number_Of_Cycles = Global_CPI * Number_Of_Instructions

>> Number_Of_Cycles(p1) = 2.6x10^6

>> Number_Of_Cycles(p2) = 2.01x10^6
